#__________________________________________________________________________________________________________________________________________
DST_STREAMING_EVENT_run3auau_streams:

   params:
     name:       DST_STREAMING_EVENT_$(streamname)_run3auau
     build:      new
     build_name: new
     dbtag:      nocdbtag
     version:    0
     logbase :   $(name)_$(build)_$(tag)_$(version)-$INT(run,{RUNFMT})-$INT(seg,{SEGFMT})
     outbase :   $(name)_$(build)_$(tag)_$(version)
     script  :   run_parallel_streams.sh
     payload :   ./ProdFlow/run3auau/streaming/
     neventsper:  10000
     comment :    "---"
     rsync   : "./ProdFlow/run3auau/streaming/*"
     mem     :   4000MB

   input:
      db: daqdb
      direct_path: /sphenix/lustre01/sphnxpro/{mode}/*/*/
      query: |-
         with run2pp as (
              select 56900 as firstrun,
                     99999 as lastrun
         ),
         streams as (select distinct split_part( split_part(filename,'/',-1), '-', 1 ) as streamfile, hostname                     from filelist,run2pp where runnumber>=run2pp.firstrun and runnumber<=run2pp.lastrun),

         intt_stream as (
              select streamfile, hostname as names from streams where hostname in ( 'intt0', 'intt1', 'intt2', 'intt3', 'intt4', 'intt5', 'intt6', 'intt7' )
         ),
         mvtx_stream as (
              select streamfile, hostname as names from streams where hostname in ( 'mvtx0',  'mvtx1',  'mvtx2',  'mvtx3',  'mvtx4',  'mvtx5' )
         ),
         tpot_stream as ( 
              select streamfile, 'TPOT' as names from streams where hostname in ( 'ebdc39' ) 
         ),
         tpc_stream as (
              select streamfile, replace( hostname, 'ebdc', 'TPC' ) as streamname from streams where hostname in ( 'ebdc00', 'ebdc01', 'ebdc02', 'ebdc03', 'ebdc04', 'ebdc05', 'ebdc06', 'ebdc07', 'ebdc08', 'ebdc09', 
                                                                                    'ebdc10', 'ebdc11', 'ebdc12', 'ebdc13', 'ebdc14', 'ebdc15', 'ebdc16', 'ebdc17', 'ebdc18', 'ebdc19', 
                                                                                    'ebdc20', 'ebdc21', 'ebdc22', 'ebdc23' ) 
         ),
         all_streams as ( 
             select * from tpc_stream
                 union
             select * from intt_stream
                 union 
             select * from mvtx_stream
                 union
             select * from tpot_stream
         ),

         all_jobs as (

           select 'daqdb/filelist' as source, runnumber, 0 as segment, string_agg( distinct split_part(filename,'/',-1), ' ' ) as files, 'na' as fileranges, UPPER(all_streams.streamname) as streamname, all_streams.streamfile
 
           from filelist, run2pp, all_streams

           where 
           transferred_to_sdcc='true' and
           runnumber>=run2pp.firstrun and runnumber<=run2pp.lastrun and
           (
               (filename  similar to '/bbox%/GL1_(physics|beam|cosmics)%.evt'   and lastevent>2 ) or
               (filename  similar to '%'||all_streams.streamfile||'%' and filename similar to '%(physics|beam|cosmics)%' )           
           )

           {run_condition}

           group by runnumber,all_streams.streamfile,all_streams.streamname

           having
                max(lastevent)>1000          and
                sum( case when filename similar to '/bbox%/GL1_(physics|beam|cosmics)%.evt' then 1 else 0 end )>0 and
                (
                   sum( case when filename like '/bbox%/TPC%'   then 1 else 0 end )>0 or
                   sum( case when filename like '/bbox%/%intt%' then 1 else 0 end )>0 or
                   sum( case when filename like '/bbox%/%mvtx%' then 1 else 0 end )>0 or
                   sum( case when filename like '/bbox%/TPOT%'  then 1 else 0 end )>0 
                )

           )        

           select * from all_jobs 



              ;


   #
   # Again I note the need to ensure that the arguments are properly specified given the
   # definition of the payload script.
   #
   job:
     batch_name            : "$(name)_$(build)_$(tag)_$(version)-singlestreams"
     arguments             : "$(nevents) {outbase} {logbase} $(run) $(seg) $(outdir) $(buildarg) $(tag) $(inputs) $(ranges) {neventsper} {logdir} {comment} {histdir} {PWD} {rsync}"
     output_destination    : '{logdir}'
     log                   : '{condor}/{logbase}.condor'
     accounting_group      : "group_sphenix.mdc2"
     accounting_group_user : "sphnxpro"
     priority : '100000'
     request_xferslots: '0'



#__________________________________________________________________________________________________________________________________________
DST_TRKR_CLUSTER_run3auau_streams:

   params:
     name:       DST_TRKR_CLUSTER_run3auau
     build:      new
     build_name: new
     dbtag:      2024p017
     version:    0
     logbase :   $(name)_$(build)_$(tag)_$(version)-$INT(run,{RUNFMT})-$INT(seg,{SEGFMT})
     outbase :   $(name)_$(build)_$(tag)_$(version)
     script  :   run_singlejob0.sh
     payload :   ./ProdFlow/run3auau/TrackingProduction/
     neventsper:      10000
     comment :    "---"
     rsync   : "./ProdFlow/run3auau/TrackingProduction/*"
     mem     :   4000MB
     mnrun   : 56900
     mxrun   : 99999
     dstin   : 'DST_STREAMING_EVENT_%_run3auau'
     dataset : 'new_nocdbtag_v000'

   input:
      db: fc
      query: |-
         with allruns as (
         select
                'filecatalog/datasets'         as source        ,
                runnumber                                       ,
                segment                                         ,
                string_agg( distinct filename, ' ' ) as files   ,
                'NA'  as fileranges,
                count(distinct filename) as ninputs
         from
                datasets
         where
                dsttype like '{dstin}' and dataset='{dataset}'
                {run_condition}
                and runnumber>={mnrun}
                and runnumber<={mxrun}

         group by runnumber, segment

         order by runnumber {limit_condition}
         )

         select * from allruns where allruns.ninputs>0 order by runnumber, segment


   #
   # Again I note the need to ensure that the arguments are properly specified given the
   # definition of the payload script.
   #
   job:
     arguments             : "$(nevents) {outbase} {logbase} $(run) $(seg) $(outdir) $(buildarg) $(tag) $(inputs) $(ranges) {neventsper} {logdir} {comment} {histdir} {PWD} {rsync}"
     output_destination    : '{logdir}'
     log                   : '{condor}/{logbase}.condor'
     accounting_group      : "group_sphenix.mdc2"
     accounting_group_user : "sphnxpro"
     priority : '100000'
     request_xferslots: '0'

     

#__________________________________________________________________________________________________________________________________________
DST_TRKR_SEED_run3auau_streams:

   params:
     name:       DST_TRKR_SEED_run3auau
     build:      new
     build_name: new
     dbtag:      2024p017
     version:    0
     logbase :   $(name)_$(build)_$(tag)_$(version)-$INT(run,{RUNFMT})-$INT(seg,{SEGFMT})
     outbase :   $(name)_$(build)_$(tag)_$(version)
     script  :   run_jobA.sh
     payload :   ./ProdFlow/run3auau/TrackingProduction/
     neventsper:      10000
     comment :    "---"
     rsync   : "./ProdFlow/run3auau/TrackingProduction/*"
     mem     :   4000MB
     mnrun   : 56900
     mxrun   : 99999
     dstin   : 'DST_TRKR_CLUSTER_run3auau'
     dataset : 'new_2024p017_v000'     

   input:
      db: fc
      query: |-
         with allruns as (
         select
                'filecatalog/datasets'         as source        ,
                runnumber                                       ,
                segment                                         ,
                string_agg( distinct filename, ' ' ) as files   ,
                'NA'  as fileranges,
                count(distinct filename) as ninputs
         from
                datasets
         where
                dsttype like '{dstin}' and dataset='{dataset}'
                {run_condition}
                and runnumber>={mnrun}
                and runnumber<={mxrun}

         group by runnumber, segment

         order by runnumber {limit_condition}
         )

         select * from allruns where allruns.ninputs>0 order by runnumber, segment


   #
   # Again I note the need to ensure that the arguments are properly specified given the
   # definition of the payload script.
   #
   job:
     arguments             : "$(nevents) {outbase} {logbase} $(run) $(seg) $(outdir) $(buildarg) $(tag) $(inputs) $(ranges) {neventsper} {logdir} {comment} {histdir} {PWD} {rsync}"
     output_destination    : '{logdir}'
     log                   : '{condor}/{logbase}.condor'
     accounting_group      : "group_sphenix.mdc2"
     accounting_group_user : "sphnxpro"
     priority : '100000'
     request_xferslots: '0'

     


#__________________________________________________________________________________________________________________________________________
DST_TRKR_TRACKS_run3auau_streams:

   params:
     name:       DST_TRKR_TRACKS_run3auau
     build:      new
     build_name: new
     dbtag:      2024p017
     version:    0
     logbase :   $(name)_$(build)_$(tag)_$(version)-$INT(run,{RUNFMT})-$INT(seg,{SEGFMT})
     outbase :   $(name)_$(build)_$(tag)_$(version)
     script  :   run_jobC.sh
     payload :   ./ProdFlow/run3auau/TrackingProduction/
     neventsper:      10000
     comment :    "---"
     rsync   : "./ProdFlow/run3auau/TrackingProduction/*"
     mem     :   4000MB
     mnrun   : 56900
     mxrun   : 99999
     dstin1   : 'DST_TRKR_CLUSTER_run3auau'
     dataset1 : 'new_2024p017_v000'
     dstin2   : 'DST_TRKR_SEED_run3auau'
     dataset2 : 'new_2024p017_v000'          

   input:
      db: fc
      query: |-
         with allruns as (
         select
                'filecatalog/datasets'         as source        ,
                runnumber                                       ,
                segment                                         ,
                string_agg( distinct filename, ' ' ) as files   ,
                'NA'  as fileranges,
                count(distinct filename) as ninputs
         from
                datasets
         where
                (
                   (dsttype like '{dstin1}' and dataset='{dataset1}') or
                   (dsttype like '{dstin2}' and dataset='{dataset2}')
                )
                {run_condition}
                and runnumber>={mnrun}
                and runnumber<={mxrun}

         group by runnumber, segment

         having (

            sum( case when (dsttype like '{dstin1}' and dataset='{dataset1}')     then 1 else 0 end )>0    and
            sum( case when (dsttype like '{dstin2}' and dataset='{dataset2}')     then 1 else 0 end )>0 

         )         

         order by runnumber {limit_condition}
         )

         select * from allruns where allruns.ninputs>0 order by runnumber, segment


   #
   # Again I note the need to ensure that the arguments are properly specified given the
   # definition of the payload script.
   #
   job:
     arguments             : "$(nevents) {outbase} {logbase} $(run) $(seg) $(outdir) $(buildarg) $(tag) $(inputs) $(ranges) {neventsper} {logdir} {comment} {histdir} {PWD} {rsync}"
     output_destination    : '{logdir}'
     log                   : '{condor}/{logbase}.condor'
     accounting_group      : "group_sphenix.mdc2"
     accounting_group_user : "sphnxpro"
     priority : '100000'
     request_xferslots: '0'

     
     
